---
- name: create home filesystem
  shell: |
     zfs list "{{ kvm_zfs_filesystem }}/{{ kvm_machine.name }}" 
     if [[ $? != 0 ]] 
     then
       zfs create -o "mountpoint={{ kvm_image_root }}/{{ kvm_machine.name }}" "{{ kvm_zfs_filesystem }}/{{ kvm_machine.name }}" && exit 42 || exit $?
     fi
     exit 0
  args:
    executable: /bin/bash
  register: kvm_zfs_home_create_result
  failed_when: "kvm_zfs_home_create_result.rc != 42 and kvm_zfs_home_create_result.rc != 0"
  changed_when: "kvm_zfs_home_create_result.rc == 42"
- group:
    name: "{{ kvm_machine.name }}"
    gid: "{{ kvm_machine.gid|default(kvm_machine_uid) }}"
    state: "present"
- user:
    name: "{{ kvm_machine.name }}"
    group: "{{ kvm_machine.name }}"
    uid: "{{ kvm_machine_uid }}"
    groups: kvm
    state: "present"
    createhome: "no"
    shell: "/bin/bash"
    home: "{{ kvm_image_root }}/{{ kvm_machine.name }}"
    update_password: always
  register: kvm_user_added
# we need to restart udev again here because udev 
# because the user was not available when we added it in 
# the udef rule 
- service:
    name: udev
    state: restarted
  when: kvm_user_added.changed
- name: change ownership of kvm_machine home fs 
  file:
   dest: "{{ kvm_image_root }}/{{ kvm_machine.name }}"
   state: directory
   owner: "{{ kvm_machine.name }}"
   group: "{{ kvm_machine.name }}"
   mode: "0750"
- name: create kickoff fd
  shell: |
     zfs list "{{ kvm_zfs_filesystem }}/{{ kvm_machine.name }}/kickoff" 
     if [[ $? != 0 ]] 
     then
       zfs create -s -V 2M "{{ kvm_zfs_filesystem }}/{{ kvm_machine.name }}/kickoff" && exit 42 || exit $?
     fi
     exit 0
  args:
    executable: /bin/bash
  register: kvm_zfs_kickoff_machine_result
  failed_when: "kvm_zfs_kickoff_machine_result.rc != 42 and kvm_zfs_kickoff_machine_result.rc != 0"
  changed_when: "kvm_zfs_kickoff_machine_result.rc == 42"
- name: Wait for kickoff device to get ready 
  wait_for:
    path: "/dev/zvol/{{ kvm_zfs_filesystem }}/{{ kvm_machine.name }}/kickoff"
    state: present
  when: kvm_zfs_kickoff_machine_result.changed
- name: mount kickoff fd
  shell: |
     # todo -q is not available with vfat
     /sbin/mkfs.{{ kvm_images[kvm_machine.image][kvm_machine.image_version]['kickoff_type']|default('vfat') }} "/dev/zvol/{{ kvm_zfs_filesystem }}/{{ kvm_machine.name }}/kickoff"  || exit $?
     mount "/dev/zvol/{{ kvm_zfs_filesystem }}/{{ kvm_machine.name }}/kickoff" /mnt
  args:
    executable: /bin/bash
  register: kvm_zfs_kickoff_mount_result
  when: kvm_zfs_kickoff_machine_result.changed
- name: copy kickoff.yml
  copy:
    dest: /mnt/kickoff.yml
    content: "{{ kvm_machine|to_nice_yaml(indent=2) }}"
    owner: root
    group: root
    mode: "0600"
  when: kvm_zfs_kickoff_machine_result.changed
- name: umount kickoff fd
  shell: |
     umount /mnt
  args:
    executable: /bin/bash
  when: kvm_zfs_kickoff_machine_result.changed
- name: chk if image available
  shell: |
     zfs list "{{ kvm_image_zpool }}/{{ kvm_machine.image }}@{{ kvm_machine.image_version }}" 
  args:
    executable: /bin/bash
  register: kvm_check_image_available
  failed_when: False
- name: download image 
  include_tasks: kvm_image_version.yml
  vars:
    kvm_image_version: "{{ kvm_machine.image_version }}"
    kvm_image_name: "{{ kvm_machine.image }}"
  when: kvm_check_image_available.rc != 0
- name: clone_vm_image
  shell: |
     zfs list "{{ kvm_zfs_filesystem }}/{{ kvm_machine.name }}/disk" 
     if [[ $? != 0 ]] 
     then
       zfs clone "{{ kvm_image_zpool }}/{{ kvm_machine.image }}@{{ kvm_machine.image_version }}" "{{ kvm_zfs_filesystem }}/{{ kvm_machine.name }}/disk" && exit 42 || exit $?
     fi
     exit 0
  args:
    executable: /bin/bash
  register: kvm_zfs_clone_machine_result
  failed_when: "kvm_zfs_clone_machine_result.rc != 42 and kvm_zfs_clone_machine_result.rc != 0"
  changed_when: "kvm_zfs_clone_machine_result.rc == 42"
- name: create additional disks
  shell: |
     zfs list "{{ kvm_zfs_filesystem }}/{{ kvm_machine.name }}/disk_{{ item.name }}" 
     if [[ $? != 0 ]] 
     then
       zfs create -s -V "{{ item.size }}" "{{ kvm_zfs_filesystem }}/{{ kvm_machine.name }}/disk_{{ item.name }}" && exit 42 || exit $?
     fi
     exit 0
  args:
    executable: /bin/bash
  register: kvm_zfs_disk_create_result
  failed_when: "kvm_zfs_disk_create_result.rc != 42 and kvm_zfs_disk_create_result.rc != 0"
  changed_when: "kvm_zfs_disk_create_result.rc == 42"
  with_items: "{{ kvm_machine.disks|default([]) }}"
- name: create additional filesystems
  shell: |
     zfs list "{{ kvm_zfs_filesystem }}/{{ kvm_machine.name }}/fs_{{ item.name }}" 
     if [[ $? != 0 ]] 
     then
       zfs create -o "mountpoint={{ kvm_image_root }}/{{ kvm_machine.name }}/fs_{{ item.name }}" "{{ kvm_zfs_filesystem }}/{{ kvm_machine.name }}/fs_{{ item.name }}" && exit 42 || exit $?
     else
       zfs mount | grep -e "^{{ kvm_zfs_filesystem }}/{{ kvm_machine.name }}/fs_{{ item.name }}.*{{ kvm_image_root }}/{{ kvm_machine.name }}/fs_{{ item.name }}$" > /dev/null || zfs mount "{{ kvm_zfs_filesystem }}/{{ kvm_machine.name }}/fs_{{ item.name }}"
     fi
     exit 0
  args:
    executable: /bin/bash
  register: kvm_zfs_fs_create_result
  failed_when: "kvm_zfs_fs_create_result.rc != 42 and kvm_zfs_fs_create_result.rc != 0"
  changed_when: "kvm_zfs_fs_create_result.rc == 42"
  with_items: "{{ kvm_machine.filesystems|default([]) }}"
- name: ensure access to filesystems
  file:
   dest: "{{ kvm_image_root }}/{{ kvm_machine.name }}/fs_{{ item.name }}"
   state: directory
   owner: "{{ kvm_machine.name }}"
   group: "{{ kvm_machine.name }}"
   mode: "0700"
  with_items: "{{ kvm_machine.filesystems|default([]) }}"
- template:
   dest: "{{ kvm_image_root }}/{{ kvm_machine.name }}/start.sh"
   src: templates/qemu-start.sh.j2
   owner: "{{ kvm_machine.name }}"
   group: "{{ kvm_machine.name }}"
   mode: "0755"
- template:
   dest: "{{ kvm_image_root }}/{{ kvm_machine.name }}/stop.sh"
   src: templates/qemu-stop.sh.j2
   owner: "{{ kvm_machine.name }}"
   group: "{{ kvm_machine.name }}"
   mode: "0755"
- template:
   dest: "{{ kvm_image_root }}/{{ kvm_machine.name }}/monitor.sh"
   src: templates/qemu-monitor.sh.j2
   owner: "{{ kvm_machine.name }}"
   group: "{{ kvm_machine.name }}"
   mode: "0755"
- template:
   dest: "{{ kvm_image_root }}/{{ kvm_machine.name }}/qemu.conf"
   src: templates/qemu.conf.j2
   owner: "{{ kvm_machine.name }}"
   group: "{{ kvm_machine.name }}"
   mode: "0640"
- include_tasks: "resize_{{ kvm_images[kvm_machine.image][kvm_machine.image_version]['resize_type'] }}.yml"
  when: kvm_zfs_clone_machine_result.changed and resize_type in kvm_images[kvm_machine.image][kvm_machine.image_version]
- copy:
   dest: "{{ kvm_image_root }}/{{ kvm_machine.name }}/{{ kvm_machine.name }}.status.enabled"
   content: ""
   owner: "{{ kvm_machine.name }}"
   group: "{{ kvm_machine.name }}"
   mode: "0444"
- template:
   dest: "/etc/systemd/system/vm-{{ kvm_machine.name }}.service"
   src: templates/vm-systemd.service.j2
   owner: root
   group: root
   mode: "0644"
- systemd:
   enabled: yes
   state: started
   daemon_reload: yes
   name: vm-{{ kvm_machine.name }}

