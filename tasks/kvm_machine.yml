---
# test if kvm machine needs to be set up or shut down here
#- include: drop_kvm_image.yml
#  when: 
- name: uid machine name checksum
  set_fact:
    kvm_machine_tmp_chks: "{{ kvm_machine.name|checksum }}"
- name: calc chkb and chkd
  set_fact:
    kvm_machine_tmp_chkb: "{{ ((kvm_machine_tmp_chks[5:6]|int(0, 16)/3.2)+1)|int|string }}"
    kvm_machine_tmp_chkd: "{{ kvm_machine_tmp_chks[0:4]|int(0, 16)|string }}"
- name: calculate new uid and set set spice password
  set_fact:
    kvm_machine_uid: "{{ kvm_machine.uid|default([kvm_machine_tmp_chkb[0:1], '0000']|join|int + kvm_machine_tmp_chkd[-4:]|int) }}"
    kvm_machine_spice_password: "{{ kvm_spice_passwords[kvm_machine.name]|default(kvm_default_spice_password|default('ToLazyToConfigureASpicePassword')) }}"
    kvm_bios_file: "{{ kvm_default_bios_file }}"
    kvm_bios: "{{ kvm_default_bios }}"
- fail:
    msg: |
      Uid {{ kvm_machine_uid }} is not unique or Name {{ kvm_machine.name }} is not unique. 
      If two hostnames lead to the same uid try defining a different uid in the machine config.
  when: kvm_machine_uid in kvm_unique_uid or kvm_machine.name in kvm_unique_name
- name: set unique values
  set_fact: 
    kvm_unique_uid: "{{ kvm_unique_uid }} {{ kvm_machine_uid }}={{ kvm_machine.name }}"
    kvm_unique_name: "{{ kvm_unique_name }} {{ kvm_machine.name }}={{ kvm_machine_uid }}"
- name: create home filesystem
  shell: |
     zfs list "{{ kvm_zfs_filesystem }}/{{ kvm_machine.name }}" 
     if [[ $? != 0 ]] 
     then
       zfs create -o "mountpoint={{ kvm_image_root }}/{{ kvm_machine.name }}" "{{ kvm_zfs_filesystem }}/{{ kvm_machine.name }}" && exit 42 || exit $?
     fi
     exit 0
  args:
    executable: /bin/bash
  register: kvm_zfs_home_create_result
  failed_when: "kvm_zfs_home_create_result.rc != 42 and kvm_zfs_home_create_result.rc != 0"
  changed_when: "kvm_zfs_home_create_result.rc == 42"
- group:
    name: "{{ kvm_machine.name }}"
    gid: "{{ kvm_machine.gid|default(kvm_machine_uid) }}"
    state: "present"
- user:
    name: "{{ kvm_machine.name }}"
    group: "{{ kvm_machine.name }}"
    uid: "{{ kvm_machine_uid }}"
    groups: kvm
    state: "present"
    createhome: "no"
    shell: "/bin/bash"
    home: "{{ kvm_image_root }}/{{ kvm_machine.name }}"
    update_password: always
  register: kvm_user_added
# we need to restart udev again here because udev 
# because the user was not available when we added it in 
# the udef rule 
- service:
    name: udev
    state: restarted
  when: kvm_user_added.changed
- file:
   dest: "{{ kvm_image_root }}/{{ kvm_machine.name }}"
   state: directory
   owner: "{{ kvm_machine.name }}"
   group: "{{ kvm_machine.name }}"
   mode: "0750"
- include_tasks: host_unknown.yml
  when: "inventory_hostname not in kvm_machine.deploy_to"
- include_tasks: kvm_machine_drop.yml
  when: kvm_machine.deploy_to[inventory_hostname] == "drop"
- include_tasks: kvm_machine_create.yml
  when: kvm_machine.deploy_to[inventory_hostname] == "start"
