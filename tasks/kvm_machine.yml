---
# test if kvm machine needs to be set up or shut down here
- name: uid machine name checksum
  set_fact:
    kvm_machine_tmp_chks: "{{ kvm_machine.name|checksum }}"
- name: calc chkb and chkd
  set_fact:
    kvm_machine_tmp_chkb: "{{ ((kvm_machine_tmp_chks[5:6]|int(0, 16)/3.2)+1)|int|string }}"
    kvm_machine_tmp_chkd: "{{ kvm_machine_tmp_chks[0:4]|int(0, 16)|string }}"
- debug:
    msg: |
      set default env and uid for {{ kvm_machine.name }} {{ kvm_machine.image }} {{ kvm_machine.image_version }}  
- name: set default env and uid for {{ kvm_machine.name }} {{ kvm_machine.image }} {{ kvm_machine.image_version }} 
  set_fact:
    kvm_machine_uid: "{{ kvm_machine.uid|default([kvm_machine_tmp_chkb[0:1], '0000']|join|int + kvm_machine_tmp_chkd[-4:]|int) }}"
    kvm_machine_spice_password: "{{ kvm_spice_passwords[kvm_machine.name]|default(kvm_default_spice_password|default('ToLazyToConfigureASpicePassword')) }}"
    kvm_machine_spice_addr: "{{ kvm_machine.spice_addr|default(kvm_default_spice_addr|default('::1')) }}"
    kvm_machine_spice_port: "{{ kvm_machine.spice_port|default(kvm_machine.uid|default([kvm_machine_tmp_chkb[0:1], '0000']|join|int + kvm_machine_tmp_chkd[-4:]|int)) }}"
    kvm_machine_firmware_type: "{{ kvm_machine.firmware|default(kvm_images[kvm_machine.image][kvm_machine.image_version]['firmware']|default(kvm_default_firmware)) }}"
    kvm_machine_accel_cur: "{{ kvm_machine.accel|default(kvm_machine_accel[kvm_machine.name]|default(kvm_default_accel|default('kvm'))) }}"
    kvm_machine_niceness: "{{ kvm_machine.niceness|default(kvm_default_niceness|default('-16')) }}"
    kvm_machine_drive_if: "{{ kvm_machine.drive_if|default(kvm_default_drive_if|default('virtio')) }}"
    kvm_machine_admin_port: "{{ kvm_machine.admin_port|default(kvm_images[kvm_machine.image][kvm_machine.image_version]['admin_port']|default(kvm_default_admin_port|default('22'))) }}"
- fail:
    msg: |
      The Name {{ kvm_machine.name }} is not unique, try a different one. 
  when: kvm_machine.name in kvm_unique_name
- fail:
    msg: |
      Uid {{ item }} is not unique 
      every machine needs a space of +5 uids, to get free tcp ports to patch admin services to the VM. 
      If two hostnames lead to the same uid try defining a different uid in the machine config.
      The current uid of this vm would have been {{ kvm_machine_uid }} which is already been taken by 
      {{ kvm_unique_uid[item] }}
  when: item in kvm_unique_uid
  with_items: 
    - "{{ kvm_machine_uid }}"
    - "{{ kvm_machine_uid|int(0, 10)+1 }}"
    - "{{ kvm_machine_uid|int(0, 10)+2 }}"
    - "{{ kvm_machine_uid|int(0, 10)+3 }}"
    - "{{ kvm_machine_uid|int(0, 10)+4 }}"
    - "{{ kvm_machine_uid|int(0, 10)+5 }}"
- name: set unique name
  set_fact: 
    kvm_unique_name: "{{ kvm_unique_name }} {{ kvm_machine.name }}={{ kvm_machine_uid }}"
- name: set unique uid values
  set_fact: 
    kvm_unique_uid: "{{ kvm_unique_uid }} {{ item }}={{ kvm_machine.name }}"
  with_items: 
    - "{{ kvm_machine_uid }}"
    - "{{ kvm_machine_uid|int(0, 10)+1 }}"
    - "{{ kvm_machine_uid|int(0, 10)+2 }}"
    - "{{ kvm_machine_uid|int(0, 10)+3 }}"
    - "{{ kvm_machine_uid|int(0, 10)+4 }}"
    - "{{ kvm_machine_uid|int(0, 10)+5 }}"
- include_tasks: host_unknown.yml
  when: "inventory_hostname not in kvm_machine.deploy_to"
- include_tasks: exterminate_kvm_machine.yml
  vars:
    kvm_machine_name: "{{ kvm_machine.name }}"
  when: kvm_machine.deploy_to[inventory_hostname] == "drop" or kvm_machine.deploy_to[inventory_hostname] == "exterminate"
- include_tasks: kvm_machine_create.yml
  when: kvm_machine.deploy_to[inventory_hostname] == "start"
