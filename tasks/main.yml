---
# tasks file for conesphere.kvm.manager
- apt: 
    name: "{{ item }}"
    state: latest
  with_items:
    - qemu-kvm
    - pigz
    - parted
    - util-linux
    - socat
    - ovmf
    - dosfstools
- import_tasks: setup_nat64.yml
- file:
   dest: /usr/local/bin
   state: directory
   owner: root
   group: root
   mode: "0755"
- name: create exports directory for zfs transmission 
  file:
   dest: /etc/zfs-pull-exports
   state: directory
   owner: root
   group: root
   mode: "0755"
- name: copy zfs transfer tools
  copy:
   src: "files/zfspull/{{ item }}"
   dest: "/usr/local/bin/{{ item }}"
   owner: root
   group: root
   mode: "0755"
  with_items:
    - zfs-pull.sh
    - zfs-pull-server.sh
    - zfs-pull-server-sshcmd.sh
- template:
   dest: /usr/local/bin/fdisk_max_partition.sh
   src: templates/fdisk_max_partition.sh.j2
   owner: root
   group: root
   mode: "0755"
- template:
   dest: /usr/local/bin/fdisk_max_partition_gpt.sh
   src: templates/fdisk_max_partition_gpt.sh.j2
   owner: root
   group: root
   mode: "0755"
- file:
   dest: "/etc/qemu"
   state: directory
   owner: root
   group: root
   mode: "0755"
- template:
   dest: /etc/qemu/bridge.conf
   src: templates/etc-qemu-bridge.conf.j2
   owner: root
   group: root
   mode: "0444"
- file:
   dest: "/usr/lib/qemu"
   state: directory
   owner: root
   group: kvm
   mode: "0750"
- file:
   dest: "/usr/lib/qemu/qemu-bridge-helper"
   state: file
   owner: root
   group: root
   mode: "4755"
- template:
   dest: /etc/udev/rules.d/kvm_sphere_zvol_permissions.rules
   src: templates/etc-udev-rules.d-kvm_sphere_zvol_permissions.rules.j2
   owner: root
   group: root
   mode: "0644"
  register: udev_zvol_permissions
- service:
    name: udev
    state: restarted
  when: udev_zvol_permissions.changed
- file:
   dest: "{{ kvm_firmware_root }}"
   state: directory
   owner: "root"
   group: "root"
   mode: "0755"
- name: "Download {{ kvm_firmware_cur.key }}"
  get_url:
    url: "{{ kvm_firmware_cur.value.url }}"
    checksum: "{{ kvm_firmware_cur.value.chksum }}"
    dest: "{{ kvm_firmware_root }}/{{ kvm_firmware_cur.key }}.firmware"
    mode: 0444
  with_dict: "{{ kvm_firmware }}"
  loop_control:
    loop_var: kvm_firmware_cur
- file: ssh directory
    dest: /root/.ssh
    state: directory
    mode: "0700"
    owner: root
    group: root
- name: Generate SSH keys
  shell: ssh-keygen -b 4096 -t rsa -f /root/.ssh/id_rsa -q -N ""
  args:
    creates: /root/.ssh/id_rsa
- file:
    dest: kvm_backup_ca
    state: directory
    mode: "0700"
  delegate_to: localhost
- fetch:
    src: /root/.ssh/id_rsa.pub
    dest: "kvm_backup_ca/{{ inventory_hostname }}_rsa.pub"
- copy:
    dest: kvm_backup_ca/ca_id_rsa
    mode: "0400"
    content: "{{ lookup('passwordstore', kvm_backup_sshca_key) }}"
  delegate_to: localhost
- name: Sign ssh_key
  shell: 'ssh-keygen -s kvm_backup_ca/ca_id_rsa -I "fetch_kvm_images" -V -1w:+8w -n root kvm_backup_ca/{{ inventory_hostname }}_rsa.pub'
  args:
    creates: "kvm_backup_ca/{{ inventory_hostname }}_rsa-cert.pub"
  delegate_to: localhost
- copy:
    src: "kvm_backup_ca/{{ inventory_hostname }}_rsa-cert.pub"
    dest: /root/.ssh/id_rsa-zfspull-cert.pub
    owner: root
    group: root
    mode: "0440"
- lineinfile:
    path: /root/.ssh/config
    regexp: '^CertificateFile /root/.ssh/id_rsa-zfspull-cert.pub'
    insertbefore: BOF
    create: yes
    line: 'CertificateFile /root/.ssh/id_rsa-zfspull-cert.pub'
- name: set ca for backup access 
  authorized_key:
    user: root
    state: present
    key_options: 'restrict,cert-authority,command="/usr/local/bin/zfs-pull-server-sshcmd.sh"'
    key: "{{ lookup('passwordstore', kvm_backup_sshca_pub) }}"
- include_tasks: exterminate_kvm_machine.yml
  with_items: "{{ kvm_machine_exterminate }}"
  loop_control:
    loop_var: kvm_machine_name
- include_tasks: kvm_machine.yml
  with_items: "{{ kvm_machines }}"
  loop_control:
    loop_var: kvm_machine

